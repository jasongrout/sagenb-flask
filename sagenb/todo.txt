Current TODO:
[x] preparser
[x] make sure all "/" is replaced by os.path.join, so will work on windows eventually.
[x] worksheet_process.py -- make it so graphics work, i.e., files created
[x] jsmath
[x] static documentation
[x] jmol
[x] tinymce
[x] @interact -- need to properly preparse and base64 encode maybe?
[x] live documentation
[x] introspection
[x] fill in not implemented stuff
[x] %cython
[x] control-c to stop notebook
[x] write pexpect based worksheet process system using the filesystem as before.
[x] reference should have restart reset state
[x] one user running another user's sage install on OS X -- Abort!
[x] implement ulimit/ssh/etc options like before
[x] good error message on crash of the sage process...
[x] max_walltime -- doesnt' work
[x] push my hg repo somewhere
[x] start public demo server using ssh
[ ] simple notebook stress test
[ ] old notebooks unpickle into the old notebook code!
[ ] secure mode -- check it works.

[ ] make sure that the old notebook directory "just works" with the new notebook

[ ] open(DATA+'/foo.txt','w')
DATA directory permissions issue -- the whole design of the "DATA" directory needs to be redone, since I vastly improved the security model of how the two-user notebook works (now all computations are done by a user that does *not* have permission to view or change *anything* in the server's sage_notebook directory -- everything happens in /tmp -- this is a VAST improvement, but means that DATA directory just doesn't work anymore as implemented). 

[ ] trim list of alternative notebooks sessions when not run as part of sage.

[ ] reimplement sphinx introspection. 
       * confdir in cell.py won't work without a trivial Sphinx directory, when not in Sage. make it.
[ ] hunt for bugs
[ ] make an official spkg
[ ] make patch to remove notebook from sage itself.

-------------------------------------------------------------------

[ ] worksheet process -- runs as another unix user.

[ ] change api for notebook command; in particular enable capability
    to have different sage commadn on remote machine
[ ] worksheet processes using named pipes
[ ] code to benchmark notebook externally
[ ] implement %cython mode outside sage (and as a full mode?)
[ ] fix doctests
[ ] worksheet processes use fork
[ ] worksheet process use multiprocessing 
[ ] worksheet processes using server on remote machine
[ ] genuine infinite undo implemented not using stupid snapshots but a revision log
[ ] @interact: make it so docstring of function is somehow nicely typeset and accessible
[ ] @interact's that can be included with sage

[ ] improve tracebacks of % modes, e.g., %python then 1/0 is ugly.

General TODO:

* component architecture: see Brickenstein sage-devel email 
  that mentions http://python-rum.org/browser/rum/component.py

* use memory mapped files for worksheet processes?
  http://docs.python.org/library/mmap.html
